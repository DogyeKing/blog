/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.51
 * Generated at: 2018-08-03 03:00:33 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.gmail;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import javax.mail.Transport;
import javax.mail.Message;
import javax.mail.internet.InternetAddress;
import javax.mail.Address;
import javax.mail.internet.MimeMessage;
import javax.mail.Session;
import com.cos.util.Gmail;
import javax.mail.Authenticator;
import com.cos.util.Script;
import java.util.Properties;
import com.cos.dao.MemberDAO;
import com.cos.util.SHA256;

public final class emailSendAction_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("javax.mail.Message");
    _jspx_imports_classes.add("javax.mail.internet.InternetAddress");
    _jspx_imports_classes.add("javax.mail.Address");
    _jspx_imports_classes.add("com.cos.util.Script");
    _jspx_imports_classes.add("com.cos.util.SHA256");
    _jspx_imports_classes.add("java.util.Properties");
    _jspx_imports_classes.add("javax.mail.Transport");
    _jspx_imports_classes.add("com.cos.dao.MemberDAO");
    _jspx_imports_classes.add("com.cos.util.Gmail");
    _jspx_imports_classes.add("javax.mail.Session");
    _jspx_imports_classes.add("javax.mail.internet.MimeMessage");
    _jspx_imports_classes.add("javax.mail.Authenticator");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

   MemberDAO dao = new MemberDAO();
   String id = null;
   if(session.getAttribute("id") != null){
      id = (String)session.getAttribute("id");
   }
   
   int emailChecked = dao.select_emailcheck(id);
   if(emailChecked == 1){
      Script.moving(response, "이미 인증된 회원입니다.");
   }else if(emailChecked == -1){
      Script.moving(response, "데이터베이스 오류");
   }
   
   StringBuffer url = request.getRequestURL();
   String path[] = url.toString().split("/");
   String host = "";
   for(int i=0; i<path.length-1; i++){
      host += path[i]+"/";
   }
   
   System.out.println("HOST : "+ host);
   String from = "uhc1224@gmail.com";
   String to = dao.select_email(id);
   String salt = dao.select_salt(id);
   String code = SHA256.getEncrypt(to, salt);
   
   String subject = "회원가입을 위한 이메일 인증 메일입니다.";
   String content = "다음 링크에 접속하여 이메일 인증을 진행해주세요. "
         + "<a href='"+host+"emailCheckAction.jsp?code="+code+"'>이메일 인증하기</a>";
         // code가 내 email을 salt 한 값
         
   Properties p = new Properties();
   p.put("mail.smtp.user", from);
   p.put("mail.smtp.host", "smtp.googlemail.com");
   p.put("mail.smtp.port", "465");
   p.put("mail.smtp.starttls.enable", "true");
   p.put("mail.smtp.auth", "true");
   p.put("mail.smtp.debug", "true");
   p.put("mail.smtp.socketFactory.port", "465");
   p.put("mail.smtp.socketFactory.class", "javax.net.ssl.SSLSocketFactory");
   p.put("mail.smtp.sockerFactory.fallback", "false");
   
   try{
      Authenticator auth = new Gmail();
      Session ses = Session.getInstance(p, auth);
      ses.setDebug(true);
      MimeMessage msg = new MimeMessage(ses);
      msg.setSubject(subject);
      Address fromAddr = new InternetAddress(from);
      msg.setFrom(fromAddr);
      Address toAddr = new InternetAddress(to);
      msg.addRecipient(Message.RecipientType.TO, toAddr);
      msg.setContent(content, "text/html; charset=UTF8");
      
      //메일 전송코드
      Transport.send(msg);
   }catch(Exception e){
      Script.moving(response, "오류가 발생했습니다.");
   }

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("  <meta charset=\"utf-8\">\r\n");
      out.write("  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\">\r\n");
      out.write("  <meta name=\"description\" content=\"\">\r\n");
      out.write("  <meta name=\"author\" content=\"\">\r\n");
      out.write("  <title>Cos Blog</title>\r\n");
      out.write("  <!-- Bootstrap core CSS -->\r\n");
      out.write("  <link href=\"");
      out.print(request.getContextPath());
      out.write("/css/bootstrap.css\" rel=\"stylesheet\">\r\n");
      out.write("  <!-- Custom styles for this template -->\r\n");
      out.write("  <link href=\"");
      out.print(request.getContextPath());
      out.write("/css/blog-home.css\" rel=\"stylesheet\">\r\n");
      out.write("  <!-- Bootstrap core JavaScript -->\r\n");
      out.write("  <script src=\"");
      out.print(request.getContextPath());
      out.write("/js/jquery.min.js\"></script>\r\n");
      out.write("  <script src=\"");
      out.print(request.getContextPath());
      out.write("/js/bootstrap.bundle.min.js\"></script>\r\n");
      out.write("  <script src=\"");
      out.print(request.getContextPath());
      out.write("/js/validation.js\"></script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<!-- Navigation -->\r\n");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "../include/navigation.jsp", out, false);
      out.write("\r\n");
      out.write("\r\n");
      out.write("<div class=\"container\">\r\n");
      out.write("   <!-- Login Form -->\r\n");
      out.write("   <div class=\"row\">\r\n");
      out.write("     <!-- Blog Entries Column -->\r\n");
      out.write("     <div class=\"col-md-12 my-order\">\r\n");
      out.write("         <div class=\"content-section\">\r\n");
      out.write("               <div class=\"alert alert-success md-4\" role=\"alert\">\r\n");
      out.write("                  이메일 주소 인증 메일이 전송되었습니다. 회원가입시 입력했던 이메일에 들어가셔서 인증해주세요.\r\n");
      out.write("               </div>\r\n");
      out.write("         </div>\r\n");
      out.write("      </div>\r\n");
      out.write("  </div>\r\n");
      out.write("  <!-- ./row -->\r\n");
      out.write("  </div>\r\n");
      out.write("<!-- ./container -->\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
